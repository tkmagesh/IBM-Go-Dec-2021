Magesh Kuppan

Schedulue
    Commence : 9:30 Hrs
    Tea Beak : 11:00 Hrs (20 mins)
    Lunch Break : 13:00 Hrs (1 Hr)
    Tea Break : 15:30 Hrs (20 mins)
    Wind up : 17:30 Hrs

Methodology
    No powerpoint
    100% hands on
    Atleast 50% of the participants should be have completed the assignments for us to proceed
    Be prepared to share your solution

Repository
    https://github.com/tkmagesh/ibm-go-dec-2021

Software Requirements
    Go tools (https://go.dev/dl/)
    Visual Studio Code (https://code.visualstudio.com/) OR any editor

About You
    Name
    Primary Skillset
    Total Experience
    Experience in Golang if any
    Any interesting books you read / shows you watched


Weapons of Math Destruction
Pushkin Vertigo (publisher)
The Shadow of the Wind 

Why Golang?
    1. Simplicity (python)
    2. Speed
    3. Concurrency
    4. No need for any runtime
    5. Open source


Barry Shwartz
    The Paradox of Choice 

Simple
    25 keywords
    No classes
    No inheritance
    No access modifiers
    No exceptions

Compiled
On par with "C"
Concurrency
    1000s of concurrent operations (goroutines) using one OS thread
    Parallelism is built in
    Built in scheduler
    Built for concurrency
    Language features for concurrency
        go, chan, operators ( <- ), select & range
        sync package

go run hello-world.go
go build hello-world.go
go build -o hello-world hello-world.go

Data Types in Golang
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real (float32) + imaginary (float32))
    complex128 (real (float64) + imaginary (float64))

    byte (alias for uint8)
    rune (alias for int32) (represent a Unicode code point (unicode character))

Assignment-1
Write a program that will print all the prime numbers between 3 to 100

Assignment-2
Display the following menu 
		1. Add
		2. Subtract
		3. Multiply
		4. Divide
		5. Exit
    If the user choice is 1 - 4, 
		accept 2 numbers 
		perform the operation
		print the result
		display the menu again
	if the user choice is 5
		exit from the application
	If the user enters any other choice 
		display "Invalid choice" 
		display the menu again.

Functions
    1. variadic functions
    2. Higher order functions
        a. anonymous functions
        b. assign functions to variables
        c. pass functions as arguments
        d. return functions from functions


Structure and Interpretation of Computer Programs (SICP)

Assignment-3
    Refactor Assignment-2 using functions
    
Collections
    Array
        fixed size collection of data of same type

    Slice
    Map

len
make
cap
panic
recover
append

Modules go 1.13

    $GOPATH
        pkg
        bin
        src
            github.com
                tkmagesh
                    app1

                    app2
                        utils
                        main.go
                            import "github.com/tkmagesh/app2/utils"

    Creating a module
        go mod init <module_name>
        go mod tidy
        go mod vendor

Concurrency
    To detect race conditions
         go run --race demo-05.go

    
    Channels
        ch <- 10 => write data in to the channel
        x := <- ch => reading data from the channel
        The read operation is a 'blocking' operation

        Unbuffered channels
            A write can be successful ONLY when a read is already initiated
            If no read operation is initiated, the write operation will be blocked

io
    io package
        base interfaces
            Reader
            Writer
            Closer
            Seeker
    ioutil
        read file
        write file
    bufio
        read line
        buffered reading and writing
    os
        file related operations
            creating, opening, deleting

GRPC
    .NET Remoting
        binary serialization
        TCP based
            Request & Response
            Server Push
            Bidirectional Streaming
    Java RMI

    CORBA
        Identify a service
        Request & Response
        Data Serialization

    WEB (Web Service)
        TCP
            HTTP
        XML
        SOAP (Simple Object Access Protocol)
        WSDL (Web Service Description Language)

    REST
        Data as a resource
        What data ? -> URL
        What Operation? => HTTP Methods
        Response -> HTTP Status Codes

    GRPC
        TCP
            HTTP 2.0 (Formerly SPDY)
        Binary Serialization
        Serialization Format
            Protocol buffers
        Communication Patterns
            Request & Response
            Client Streaming
            Server Streaing
            Bidirectional Streaming
        Languages Support
            Java
            .NET
            Go
            (https://grpc.io/docs/languages/)
        
    Protocol Bufferers
        Schema is shared between the client and server

P101,Pen,10,100,Stationary
P102,Pencil,20,200,Stationary
    Data => 56
    XML => 248 (5 times)
    JSON => 159 (3 times)

Define the service
Define the payload(request data, response data)
Generate proxy and the stub
Write the client code to communicate to the proxy
Write the server code to provide the service functionaly

Tools for GRPC
    Mac
        brew install protobuf
        brew install protoc-gen-go
        brew install protoc-gen-go-grpc

    Windows
        go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1
        download the protoc tool from https://github.com/protocolbuffers/protobuf/releases/tag/v3.19.1


To generate the proxy and the stub, run the following command in the application folder
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto